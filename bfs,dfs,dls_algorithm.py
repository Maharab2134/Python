# -*- coding: utf-8 -*-
"""BFS,DFS,DLS algorithm

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Qz0s1NLnNaFwjXDWgBFXQtolWs9P25T

# **BFS**
"""

from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])

    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node, end=' ')
            visited.add(node)
            queue.extend(graph[node])

# Define the graph
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'M'],
    'C': ['B', 'L', 'P'],
    'D': ['B'],
    'M': ['B', 'K'],
    'L': ['C', 'R'],
    'P': ['C', 'Y'],
    'K': ['M'],
    'R': ['L', 'G'],
    'Y': ['P'],
    'G': ['R']
}

# Run BFS
bfs(graph, 'A')

"""# **DFS**"""

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()

    if start not in visited:
        print(start, end=' ')
        visited.add(start)
        for neighbor in graph[start]:
            dfs(graph, neighbor, visited)


graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'M'],
    'C': ['B', 'L', 'P'],
    'D': ['B'],
    'M': ['B', 'K'],
    'L': ['C', 'R'],
    'P': ['C', 'Y'],
    'K': ['M'],
    'R': ['L', 'G'],
    'Y': ['P'],
    'G': ['R']
}


dfs(graph, 'A')

"""# **DLS**"""

def dls(graph, node, visited, depth_limit, current_depth=0):
    if current_depth > depth_limit:
        return

    if node not in visited:
        print(node, end=' ')
        visited.add(node)

        for neighbor in graph[node]:
            dls(graph, neighbor, visited, depth_limit, current_depth + 1)

graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'M'],
    'C': ['B', 'L', 'P'],
    'D': ['B'],
    'M': ['B', 'K'],
    'L': ['C', 'R'],
    'P': ['C', 'Y'],
    'K': ['M'],
    'R': ['L', 'G'],
    'Y': ['P'],
    'G': ['R']
}

depth_limit = 2
visited = set()
dls(graph, 'A', visited, depth_limit)